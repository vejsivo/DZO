function img_matched = match_hists(img, img_target, intensity_levels)
    if nargin < 3
        intensity_levels = 256;
    end

    img_cdf    = compute_cdf(img, intensity_levels);
    target_cdf = compute_cdf(img_target, intensity_levels);
    
    inv_target_cdf = invert_cdf(target_cdf, intensity_levels);
    

    % We'll create a vector of possible CDF values for indexing
    cdf_axis = linspace(0, 1, intensity_levels);
    
    for i = 1:intensity_levels
        % cdf_value for intensity i-1
        cdf_val = img_cdf(i);
        
        % We interpolate on the inverted target CDF to find the matching intensity
        matching_lut(i) = interp1(cdf_axis, inv_target_cdf, cdf_val, 'linear', 'extrap');
    end
    
    % Apply the LUT to the input image
    % 1) Scale [0,1] image to [0, intensity_levels-1]
    round_img = round(img * (intensity_levels - 1));
    img_matched = zeros(size(img));
    
    % 2) Remap each pixel
    for x = 1:size(img,1)
        for y = 1:size(img,2)
            old_intensity = round_img(x,y) + 1;             % +1 for 1-based index
            new_intensity = matching_lut(old_intensity);    % in [0, intensity_levels-1]
            img_matched(x,y) = new_intensity / (intensity_levels - 1);
        end
    end
end

function inverted_map = invert_cdf(cdf_vector, intensity_values)
    intensities = (0:intensity_values-1)';
    cdf_vector = cdf_vector(:);
    [cdf_unique, unique_idx] = unique(cdf_vector);
    intensities_unique = intensities(unique_idx);
    query_points = linspace(0, 1, intensity_values);
    inverted_map = interp1(cdf_unique, intensities_unique, query_points, 'linear', 'extrap');
end


